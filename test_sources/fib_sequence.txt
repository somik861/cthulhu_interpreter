.struct bv32 builtin

# set value n to compute the nth fib number
arg_stack:
   $30

%init:
	0 => @main
	1 => @empty # call stack
	2 => @empty # work stack
	3 => @procedures # stack to save procedures definitions
	4 => @arg_stack
	5 => @empty # result will be put here


# Implementation defined stacks
empty:

# all procedures has to start with prefix 'proc_'
proc_fib:
    # execute fib_big thread
    stck move 3 2
    stck move 3 2
    stck move 3 2
    stck dup 3 1 2
    stck move 2 3
    stck move 2 3
    stck move 2 3
    stck move 2 3
    stck exec 1

    # execute fib_small thread
    stck move 3 2
    stck move 3 2
    stck dup 3 1 2
    stck move 2 3
    stck move 2 3
    stck move 2 3
    stck exec 1

    # kill current thread
    bv32 zero 2
    bv32 guard_nonzero 2

proc_fib_small:
    bv32 const 2 1
	bv32 dup 4 2 3
    bv32 move 3 4

    bv32 lt 2 1 4
	bv32 move 4 1

	# breaks if not < 2
	bv32 guard_nonzero 1

	# compute 0 and 1
	bv32 move 4 5

    # call next
	stck exec 1

    # kill current thread
    bv32 zero 2
    bv32 guard_nonzero 2

proc_fib_big:

proc_sum_two_results:

procedures:
    # main procedure for calculating fib
    @proc_fib
    # sums two numbers on top of the result stack
    @proc_sum_two_results
    # calculates fib <= 1, dies on bigger
    @proc_fib_small
    # calculates fib > 1, dies on smaller
    @proc_fib_big
    # empty stack just for convenience (and also as a final procedure)
    @empty
    
main:
    # populate call stack
    ## put empty stack at the bottom of the call stack
    stck move 3 2
    stck move 3 2
    stck move 3 2
    stck move 3 2
    stck dup 3 1 2
    stck move 2 3
    stck move 2 3
    stck move 2 3
    stck move 2 3

    # put proc_fib on top of the call stack
    stck dup 2 3 1

    # execute thread with new stack
    stck exec 1

    # kill main thread
    bv32 zero 2
    bv32 guard_nonzero 2
